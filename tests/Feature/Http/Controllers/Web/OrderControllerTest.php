<?php

namespace Tests\Feature\Http\Controllers\Web;

use App\Constants\Orders;
use App\Constants\Payments;
use App\Constants\PlaceToPay;
use App\Models\Cart;
use App\Models\Category;
use App\Models\Color;
use App\Models\Order;
use App\Models\OrderDetail;
use App\Models\Payment;
use App\Models\Photo;
use App\Models\Product;
use App\Models\Size;
use App\Models\Stock;
use App\Models\Tag;
use App\Models\TypeSize;
use App\Models\User;
use Illuminate\Foundation\Testing\RefreshDatabase;
use Illuminate\Foundation\Testing\WithFaker;
use Tests\TestCase;

class OrderControllerTest extends TestCase
{
    use RefreshDatabase;

    protected $user;

    public function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        $this->withoutExceptionHandling();
        $this->user = factory(User::class)->create([
            'is_active' => true,
            'email_verified_at' => now()
        ]);
        $this->user->cart = factory(Cart::class)->create([
            'user_id' => $this->user->id
        ]);
        $stock = $this->createProductRelations();

        $this->user->cart->stocks()->attach($stock->id, ['quantity' => 2]);
    }

    /**
     * A basic feature test example.
     *
     * @return void
     */
    public function testStore()
    {
        $response = $this->actingAs($this->user)
            ->post(route('user.order.store', $this->user),
            [
                'user_id' => $this->user->id
            ]);

        $response->assertStatus(302);
        $this->assertDatabaseHas('orders',
        [
            'user_id' => $this->user->id
        ]);
    }

    public function testGetStatusPaymentApproved()
    {
        $order = factory(Order::class)->create([
            'user_id' => $this->user->id
        ]);
        factory(OrderDetail::class)->create([
            'order_id' => $order->id
        ]);
        factory(Payment::class)->create([
            'order_id' => $order->id,
            'request_id' => 367394
        ]);
        $response = $this->actingAs($this->user)
            ->post(route('user.order.status', [$this->user->id]),
            [
                'order_id' => $order->id
            ]);

        $response
            ->assertStatus(302)
            ->assertRedirect(route('user.order.show', [$this->user->id, $order->id]))
            ->assertSessionHas('message');

        $this->assertDatabaseHas('orders',
            [
                'id' => $order->id,
                'status' => Orders::STATUS_PENDING_SHIPMENT
            ]);
    }

    public function testGetStatusPaymentPending()
    {
        $order = factory(Order::class)->create([
            'user_id' => $this->user->id
        ]);
        factory(OrderDetail::class)->create([
            'order_id' => $order->id
        ]);
        factory(Payment::class)->create([
            'order_id' => $order->id,
            'request_id' => 367478
        ]);
        $response = $this->actingAs($this->user)
            ->post(route('user.order.status', [$this->user->id]),
                [
                    'order_id' => $order->id
                ]);

        $response
            ->assertStatus(302)
            ->assertRedirect(route('user.order.show', [$this->user->id, $order->id]))
            ->assertSessionHas('message');

        $this->assertDatabaseHas('orders',
            [
                'id' => $order->id,
                'status' => Orders::STATUS_PENDING_PAY
            ]);
    }

    public function createProductRelations(): Stock
    {
        $categories = [
            'RopaTest','ZapatosTest','DeportesTest','AccesoriosTest'
        ];
        foreach ($categories as $name) {
            factory(Category::class)->create([
                'name' => $name,
                'id_parent' => null
            ]);
        }
        factory(Category::class, 2)->create();
        $tag = factory(Tag::class)->create();
        $product = factory(Product::class)->create();
        $product->tags()->attach($tag->id);
        factory(Photo::class, rand(1, 5))->create([
            'product_id' => $product->id
        ]);
        factory(TypeSize::class)->create();
        factory(Size::class)->create();
        factory(Color::class)->create();

        return factory(Stock::class)->create([
            'quantity' => 5
        ]);
    }
}
