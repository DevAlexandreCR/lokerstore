<?php

namespace Tests\Feature\Http\Controllers\Admin;

use AdminSeeder;
use App\Constants\Admins;
use App\Constants\Orders;
use App\Constants\Roles;
use App\Models\Admin\Admin;
use App\Models\Order;
use Illuminate\Foundation\Testing\RefreshDatabase;
use Illuminate\Foundation\Testing\WithFaker;
use OrderSeeder;
use StockSeeder;
use TestDatabaseSeeder;
use Tests\TestCase;
use UserSeeder;

class OrdersControllerTest extends TestCase
{
    use RefreshDatabase;
    use WithFaker;

    private $admin;

    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        $this->seed([
            TestDatabaseSeeder::class,
            UserSeeder::class,
            StockSeeder::class,
            OrderSeeder::class
        ]);

        $this->admin = factory(Admin::class)->create();
        $this->admin->assignRole(Roles::ADMIN);
        $this->withoutExceptionHandling();
    }

    public function testAnAdminCanViewOrdersIndex(): void
    {
        $response = $this->actingAs($this->admin, Admins::GUARDED)->get(route('orders.index'));

        $response
            ->assertStatus(200)
            ->assertViewIs('admin.orders.index')
            ->assertViewHas('orders');
    }

    public function testAnAdminCanViewAnOrder(): void
    {
        $id = Order::all()->random()->id;

        $response = $this->actingAs($this->admin, Admins::GUARDED)->get(route('orders.show', $id));

        $response
            ->assertStatus(200)
            ->assertViewIs('admin.orders.show')
            ->assertViewHas('order');
    }

    public function testAnAdminCanUpdateAnOrder(): void
    {
        $id = Order::all()->random()->id;

        $response = $this->actingAs($this->admin, Admins::GUARDED)->patch(route('orders.update', $id),
            [
                'status' => Orders::STATUS_CANCELED
            ]);

        $response
            ->assertStatus(302)
            ->assertRedirect(route('orders.show', $id));

        $this->assertDatabaseHas('orders', [
            'id' => $id,
            'status' => Orders::STATUS_CANCELED
        ]);
    }

    public function testAnAdminCanDeleteAnOrder(): void
    {
        $id = Order::all()->random()->id;

        $response = $this->actingAs($this->admin, Admins::GUARDED)->delete(route('orders.destroy', $id));

        $response
            ->assertStatus(302)
            ->assertRedirect(route('orders.index'));

        $this->assertDatabaseMissing('orders', [
            'id' => $id
        ]);
    }

    public function testAnAdminCanQueryAnOrderToP2P(): void
    {
        $order = Order::all()->random();

        $response = $this->actingAs($this->admin, Admins::GUARDED)->get(route('orders.verify', $order->id));

        $response
            ->assertStatus(302);
    }

    public function testAnAdminCanReverseAPurchase(): void
    {
        $order = Order::all()->random();

        $response = $this->actingAs($this->admin, Admins::GUARDED)->get(route('orders.reverse', $order->id));

        $response
            ->assertStatus(302);
    }
}
